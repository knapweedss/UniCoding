{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wj25Xo8RSMgG"
      },
      "source": [
        "## Введение в Машинное Обучение. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Urzq8ZMwSOmZ"
      },
      "source": [
        "## Практическое домашнее задание 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IFccydP1SPMx"
      },
      "source": [
        "### Общая информация"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J7p2ZSLPSPSl"
      },
      "source": [
        "\n",
        "\n",
        "```\n",
        "# Выбран кодовый формат\n",
        "```\n",
        "\n",
        "Дата выдачи: 08.06.2022\n",
        "\n",
        "Дедлайн: 15.06.2022 23:59"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-fh4q9p_SPVI"
      },
      "source": [
        "### О задании\n",
        "\n",
        "Задание состоит из 4 частей. В рамках данной работы вам нужно будет работать с текстовыми объявлениями с платформы Avito. \n",
        "\n",
        "[ссылочка на связанный контест с дз](https://www.kaggle.com/competitions/hse-intro-ds-2022-hw2/overview)\n",
        "\n",
        "Теперь вам придется более плотнее поработать с текстом. А именно: построить некоторые статистики на имеющихся текстовых данных. Заняться лемматизацией/стэммингом, поработать с фильтрацией текстовых данных.\n",
        "\n",
        "Данные для домашнего задания расположены там же в контесте. Он также имеет четкий дедлайн, до которого вы можете заслать туда посылки (дедлайн в нем стоит чуть позже дедлайна дз, на всякий случай).\n",
        "\n",
        "Для доступа к данным и лидерборду в контесте необходимо принять его правила. С ними все просто."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i12pGUp1SPXz"
      },
      "source": [
        "### Формат сдачи\n",
        "\n",
        "Оформленный юпитер ноутбук отправляете на почту: `Anshtein99@mail.ru`\n",
        "\n",
        "В теме письма указать (x - номер группы): 2022_fikl_ml_dz2_Surname_Name\n",
        "\n",
        "Файл должен именоваться так: dz2_Surname_Name.ipynb (и да, здесь нужны именно ваши фамилия и имя)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2FwsSr9GVdx6"
      },
      "source": [
        "### Оценивание и штрафы\n",
        "\n",
        "Каждая из задач имеет определенную «стоимость» (указана в скобках около задачи). Максимально допустимая оценка за работу — 10 баллов.\n",
        "\n",
        "Задание выполняется самостоятельно. «Похожие» решения считаются плагиатом и все задействованные студенты (в том числе те, у кого списали) не могут получить за него больше 0 баллов (подробнее о плагиате см. на странице курса). Если вы нашли решение какого-то из заданий (или его часть) в открытом источнике, необходимо указать ссылку на этот источник (скорее всего вы будете не единственным, кто это нашел, поэтому чтобы исключить подозрение в плагиате, необходима ссылка на источник)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YBdxqV4-Vd0w"
      },
      "source": [
        "**Дисклеймер!!!!** не удаляйте, пожалуйста, поле id из ваших данных, ни из тестовых, ни из учебных. Иначе вашы шансы сдать свои сабмишшины в систему будут стремиться к 0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w5sUS6_2VmB7"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rSCompMXVmEO"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cO0Yuza2VmG0"
      },
      "source": [
        "UPD. В рамках этого задания данные имеют достаточно внушительный объем, поэтому рекомендуем вам выполнять данную работу в юпитер коллабе.\n",
        "\n",
        "Также важно!!!: промежуточные вычисления вы можете сохранять на жесткий диск коллаба, т.к. в какой-то момент все необходимые матрицы могут не влезть к вам в оперативную память.\n",
        "Также стоит сохранять веса некоторых посчитанных моделей (на всякий случай)\n",
        "Как это делать описано [тут](https://scikit-learn.org/stable/model_persistence.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sg6tH-yAWYLO"
      },
      "source": [
        "### 0. Закачка данных\n",
        "\n",
        "В рамках этой дз настоятельно рекомендуем загрузить `train.csv` и `test.csv` предварительно на ваш гугл диск. Это достаточно сильно облегчит вам жизнь при подзагрузке данных сюда в коллаб. Сами датасеты вы сможете подтянуть через код ниже:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EPS6SQtKEzzE",
        "outputId": "429a0f3e-47c4-480b-cf58-1e595edc854c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import pandas as pd\n",
        "drive.mount('/content/drive') #путь_до_файла_с_обучением_внутри_вашего_гуглодиска"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p5qxxw8TNdvx",
        "outputId": "848e72c9-b7bb-4755-a80d-1c278deca7de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test.csv  train.csv\n"
          ]
        }
      ],
      "source": [
        "! ls /content/drive/MyDrive/hse-intro-ds-2022-hw2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YzwSNZvcXGDk"
      },
      "outputs": [],
      "source": [
        "Train = pd.read_csv('/content/drive/MyDrive/hse-intro-ds-2022-hw2/train.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qTQZngXqXybQ"
      },
      "source": [
        "Как вы можете заметить, наш датасет для обучения весит достаточно много, а в ресурсах на коллабе мы ограничены, поэтому в рамках учебного ресерча мы перейдем к исследованию конкретной части семпла нашего трейна:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z1NvTG7_XX-E"
      },
      "outputs": [],
      "source": [
        "## ну и зафиксируем рандом на всякий случай)\n",
        "Train = Train.sample(1000000, random_state=1337)\n",
        "## так жизнь пойдет легче"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 191
        },
        "id": "4MV7w4msPhTZ",
        "outputId": "c63fecf0-f4b4-4a2a-fbe6-e2e0325f2003"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      title  \\\n",
              "1482843  Айпад 4 WiFi 16 gb   \n",
              "1703596              Платье   \n",
              "\n",
              "                                               description  \\\n",
              "1482843  В хорошем состоянии, все работает, комплект то...   \n",
              "1703596  Платье в отличном состоянии./\\nПокупала на нов...   \n",
              "\n",
              "                        Category_name  Category  \n",
              "1482843  Планшеты и электронные книги        96  \n",
              "1703596     Одежда, обувь, аксессуары        27  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f15bb63-b806-4896-abdb-0dd8f2c7d60d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>description</th>\n",
              "      <th>Category_name</th>\n",
              "      <th>Category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1482843</th>\n",
              "      <td>Айпад 4 WiFi 16 gb</td>\n",
              "      <td>В хорошем состоянии, все работает, комплект то...</td>\n",
              "      <td>Планшеты и электронные книги</td>\n",
              "      <td>96</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1703596</th>\n",
              "      <td>Платье</td>\n",
              "      <td>Платье в отличном состоянии./\\nПокупала на нов...</td>\n",
              "      <td>Одежда, обувь, аксессуары</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f15bb63-b806-4896-abdb-0dd8f2c7d60d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9f15bb63-b806-4896-abdb-0dd8f2c7d60d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9f15bb63-b806-4896-abdb-0dd8f2c7d60d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "Train.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "akh-ZQMdR0DO",
        "outputId": "69b4caef-2498-4997-9250-2b6d45a025e6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "50"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "len(set(Train['Category_name']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tl18CMjTR8_i",
        "outputId": "3497246b-7e9d-4805-e39d-8c0d1b5247f0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "654383"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "len(set(Train['title']))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3MdK_UHiZxDN"
      },
      "source": [
        "### 1. Копаемся в полученных данных"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y0JXUoeuaWe_"
      },
      "source": [
        "Посмотрим на несколько на несколько строк нашего датасета. Первое, что стоит поисследовать, это наши метки, которые удобным образом представлены в текстовом формате. Поэтому...\n",
        "\n",
        "**Заадние 1.** (1 балл). Постройте график распределения имеющихся классов. Хотелось бы увидть какую-нибудь гистограмму, где визуально видно топ-5 самых популярных и топ-5 самых непопулярных классов. Что это за категории?\n",
        "Выведите из нашего трейна по паре объявлений из этих категорий. Можно ли заметить между ними (объявлениями 1 класса) какое-то сходство уже на данном этапе?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "5Rk_aKWiTbvC",
        "outputId": "0977695f-bb83-41bd-b439-e8aa765d6647"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# сначала посмотрим на распределение данных в целом \n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=[12, 7])\n",
        "sns.histplot(Train['Category_name'], bins=50, color='pink')\n",
        "plt.title(\"Categories distribution\", fontsize=14)\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "LOuZrSdxWg28",
        "outputId": "a36a3928-9513-4895-a49d-df2344ae1da8"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# удобнее вывести от наибольшего к наименьшему классу \n",
        "# люблю графики простите ¯\\_(ツ)_/¯\n",
        "plt.figure(figsize=[12, 7])\n",
        "sns.countplot(data=Train, x='Category_name', order=Train.Category_name.value_counts().index)\n",
        "plt.title(\"Categories sorted distribution\", fontsize=14)\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mTDB9FI9VCw9",
        "outputId": "6822dd79-d52f-4de9-c40e-6c40b080b238"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Одежда, обувь, аксессуары     180697\n",
              "Запчасти и аксессуары         174303\n",
              "Детская одежда и обувь        136487\n",
              "Товары для детей и игрушки     48747\n",
              "Мебель и интерьер              37229\n",
              "Name: Category_name, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "# выведем топ-5 классов удобно\n",
        "Train['Category_name'].value_counts().nlargest(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VicP5EZ2Wza3",
        "outputId": "5554e928-a332-46cd-b365-9250dff01f70"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Недвижимость за рубежом      34\n",
              "Билеты и путешествия        706\n",
              "Птицы                       870\n",
              "Готовый бизнес             1014\n",
              "Водный транспорт           1135\n",
              "Name: Category_name, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "# выведем анти-топ (топ наименьших) классов удобно\n",
        "Train['Category_name'].value_counts().nsmallest(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bJyuKh1LZjN6"
      },
      "source": [
        "Посмотрим на объявления"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C7L5pmBVZOVd",
        "outputId": "4aba6b71-7e1b-457d-b5df-048a9e5be204"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['На бронирование более 14 дней предоставляю скидку. /\\n'\n",
            " 'Внимательно читайте объявление! /\\n'\n",
            " 'Забронировано с 21.04 по 17.05; с 22.06 по 21.07; с 21.07 по 20.08. /\\n'\n",
            " 'Сдаётся замечательная квартира в Приморско, Болгария. В квартире одна '\n",
            " 'спальня и гостиная, объединённая с кухней. На кухне есть всё, вплоть до '\n",
            " 'блендера и миксера, чтобы сделать ваш отдых удобным и комфортным.  В спальне '\n",
            " 'стоит Детская кроватка. В квартире есть два кондиционера, и огромный балкон '\n",
            " 'по периметру. Интернет, телевидение,  электричество и воду оплачивать не '\n",
            " 'надо. /\\n'\n",
            " 'На балконе уютно расположились стол и стулья для восхитительного завтрака с '\n",
            " 'видом на горы и леса, а так же очень удобный мягкий шезлонг, если вам не '\n",
            " 'хочется идти на море) /\\n'\n",
            " 'Чай, соль, сахар, подсолнечное масло - уже есть на кухне. /\\n'\n",
            " 'Приморско - это небольшой городок, в котором живут жители круглый год.  Он '\n",
            " 'также известен своими замечательными чистыми пляжами, большой выбор которых '\n",
            " 'создаст впечатление, что вы каждый раз отдыхаете в новом месте. В 70 км от '\n",
            " 'Приморско - граница с Турцией, можно съездить на экскурсию или на шоппинг. '\n",
            " '/\\n'\n",
            " 'Приморско располагается в трёх заповедниках, есть определенные виды '\n",
            " 'животных, птиц и растений, которых нет больше нигде. Напротив дома находится '\n",
            " 'Аквапарк, кинотеатр под открытым небом, в 200х метрах огромный супермаркет, '\n",
            " 'а в 500х - центральная улица города./\\n'\n",
            " 'Оплата: - с апрель, май, сентябрь - 23€ в сутки/\\n'\n",
            " '- июнь, июль, август - 30€ в сутки./\\n'\n",
            " 'Финальная уборка - 50 Лев. /\\n'\n",
            " 'За электричество и воду оплату не беру./\\n'\n",
            " 'Безлимитный интернет и цифровое ТВ']\n",
            "['продам кур и петухов породы Брама,возраст 5 месяцев./\\n'\n",
            " 'куры -500/\\n'\n",
            " 'петух-1000']\n"
          ]
        }
      ],
      "source": [
        "import pprint\n",
        "# непопулярные\n",
        "pprint.pprint(list(Train.loc[Train['Category_name'] == 'Недвижимость за рубежом'].head(1)['description']))\n",
        "pprint.pprint(list(Train.loc[Train['Category_name'] == 'Птицы'].head(1)['description']))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D18bypzSZhAP",
        "outputId": "f014008f-2ddf-4fc2-bce4-0e1b78b2ee0f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['Платье в отличном состоянии./\\n'\n",
            " 'Покупала на новый год./\\n'\n",
            " 'Карсетное./\\n'\n",
            " 'Карсет украшен замшевыми вставками./\\n'\n",
            " 'Держится хорошо, на груди и спине силиконовые полоски./\\n'\n",
            " 'Без лямок, но есть крючки, можно приделать./\\n'\n",
            " 'Примерка а Авдотьино /\\n'\n",
            " '/\\n'\n",
            " 'Тип одежды: вечернее платье/\\n'\n",
            " 'Длина: миди/\\n'\n",
            " 'Cезон: мульти/\\n'\n",
            " 'Цвет: чёрный/\\n'\n",
            " 'Бренд: Befree',\n",
            " 'Сумка из натуральной кожи с лазерной обработкой. Цвет чёрный, мало б/у, '\n",
            " 'состояние новой. Привезена из Италии./\\n'\n",
            " 'Снаружи одна молния, внутри перегородка-карман на молнии по всей длине, плюс '\n",
            " 'несколько карманов для мелочевки, все очень эргономично. Ремни на кольцах, '\n",
            " 'по длине подходит как носить на плече, так и просто на локте. Отдельно ремня '\n",
            " 'длинного через плечо не предусмотренно. Состояние сумки идеальное, дефектов, '\n",
            " 'дыр нет. Подклад в идеальном состоянии.',\n",
            " 'Продам куртку бежевого цвета, одевала пару раз, состояние новой, размер over '\n",
            " 'size']\n",
            "['Продаю удобный складной шкаф с жёстким железным каркасом. Размеры: '\n",
            " '80*55*180./\\n'\n",
            " 'Шкаф б.у но в отличном состоянии./\\n'\n",
            " 'Удобен для тех, кто периодически переезжает.  В данный момент находится в '\n",
            " 'сложенном состоянии и занимает очень мало места.']\n"
          ]
        }
      ],
      "source": [
        "# популярные\n",
        "pprint.pprint(list(Train.loc[Train['Category_name'] == 'Одежда, обувь, аксессуары'].head(3)['description']))\n",
        "pprint.pprint(list(Train.loc[Train['Category_name'] == 'Мебель и интерьер'].head(1)['description']))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qtJElsqJayAB"
      },
      "source": [
        "Можно заметить, что популярные объявления содержат меньше глаголов (продам гараж, сдам квартиру, отдам кур..), еще там есть структуризация: Тип, Длина и тд. \n",
        "В объявлениях с недвижимостью присутствуют даты, в мебели размеры (и в одежде тоже), а также бренд. Тут можно многое сказать, но в обших чертах можно предположить, что объявления популярных категорий в среднем короче (я вывела их больше, а непопулярных не стала, потому что там на половину экрана сразу описание недвижимости). Но с птицами тоже встречаются короткие, поэтому это скорее обобщение"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "apmYAgP8b8IP"
      },
      "source": [
        "**Задание 2.** (1 балл). Попробуем также исследовать некоторое текстовое наполнение наших объявлений. Посчитайте топ-10 самых часто встречаемых слов в объявлениях (т.е. во всем 1млн строк) вне зависимости от их формы. Также рассмотрите топ-10 самых редких слов.\n",
        "\n",
        "На данном этапе, до обработки текста, можно условиться, что за слово в объявлении мы будет считать набор символов, отделенный от других наборов символов двумя пробелами. Сделайте некоторые выводы по полученному топу и антитопу слов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SdKiwSmiZlpo"
      },
      "outputs": [],
      "source": [
        "# Your code here (⊃｡•́‿•̀｡)⊃ 🍱🍵\n",
        "# тут пустые считать бессмысленно, но пока их не дропаем, просто без них будем считать слова\n",
        "# еще уберу /\\n, чтобы сделать сплит по пробелам и не считать лимон/\\nлимончики за одно слово\n",
        "from collections import Counter"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q76HdOrb2U5V"
      },
      "source": [
        "Топ-10"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29MNQCAf0ahd",
        "outputId": "f8288d6d-1e53-40d8-aa0e-d29e787499cd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[('в', 1050413),\n",
              " ('и', 1015537),\n",
              " ('на', 755375),\n",
              " ('-', 651205),\n",
              " ('с', 520807),\n",
              " ('по', 420753),\n",
              " ('для', 353333),\n",
              " ('не', 243233),\n",
              " ('В', 240477),\n",
              " ('—', 210511)]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Counter(\" \".join(Train[Train['description'].notnull()]['description'].str.replace('/\\n', ' ')).split()).most_common(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UqCsrgbX2GvD"
      },
      "source": [
        "Видим стоп-слова и символы, что было ожидаемо"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k6A66aRb2ayf"
      },
      "source": [
        "Анти-топ (топ 10 редких)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3VcFlxu2MRd",
        "outputId": "5950aed7-520f-4672-b763-b41ede38580f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[('руб.,хороший', 1),\n",
              " ('отдам,30000', 1),\n",
              " ('GB,чёрный,хорошее', 1),\n",
              " ('заведём', 1),\n",
              " ('проффесионалы.', 1),\n",
              " ('6500+ком.услуги.', 1),\n",
              " ('П-24', 1),\n",
              " ('джилекс', 1),\n",
              " ('хоз.помещения', 1),\n",
              " ('сан\\\\узлы', 1)]"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "Counter(\" \".join(Train[Train['description'].notnull()]['description'].str.replace('/\\n', ' ')).split()).most_common()[:-10-1:-1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V5-J9pJv3ZcZ"
      },
      "source": [
        "Тут беда с символами (которые мы по условию пока не чистили), но П-24 действительно выглядит как что-то редкое))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-36HSBAqf6f6",
        "outputId": "471405cd-dd85-4753-f29c-b9e44dd0b888"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title            0\n",
              "description      1\n",
              "Category_name    0\n",
              "Category         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "Train.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v5sF9u9rf7Dj"
      },
      "source": [
        "Видно, что есть объекты с пропуском в текстовом поле `description`. Заменим пропуски на пустую строку"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pHvLNyLlf9XK"
      },
      "outputs": [],
      "source": [
        "Train.fillna('', inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UrYtg4FRgDGG"
      },
      "source": [
        "Для простоты конкатенируем строки из полей `title` и `description`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fCGX_2JVf9ts"
      },
      "outputs": [],
      "source": [
        "Train['title&description'] = Train['title'].str[:] + ' ' + Train['description'].str[:]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mqZ60pVbgN4f"
      },
      "source": [
        "Разделим выборку ```Train``` на обучающую и тестовую"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZUSnCoTqgNmZ"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_valid, y_train, y_valid = train_test_split(Train[['title&description']], Train['Category'], random_state=1337, test_size=100000)\n",
        "\n",
        "del Train ## дальше в качестве данных для обучения используем X_train"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wMatYR6wZmGE"
      },
      "source": [
        "### 2. Обработка текста\n",
        "\n",
        "Как вы могли заметить в рамках предыдущих пунктов, наши объявления несут в себе некоторый текстовый \"мусор\". Различные местоимения, междометия, или вообще набор \"\\n\" и \"\\t\". Так что звучит довольно логично следующая мысль: давайте мы избавимся от этого мусора в тексте и проведем некоторую фильтрацию данных.\n",
        "\n",
        "Также в купе с этим на ум приходит информация о том, что в наших объявлениях одни и те же слова могут быть записаны в различной языковой форме, использовать различные падежи. Поэтому что?\n",
        "Да, лемматезация. Благо, мы живем с вами в современном мире, и люди для этой задачи написали уже несколько фреймворков, которые нам с вами смогут помочь в этой задаче, в этой дз я рекомендую использовать pymorphy2.\n",
        "\n",
        "Следующая мысль, которая может прийти на ум в рамках обработки текстовых данных - это стоп слова. Их в наших объявлениях достаточно много (ведь их писали люди). Поэтому их также стоит отфильтровать.\n",
        "\n",
        "Исходя из этих пунктов, след задание можно описать так:\n",
        "\n",
        "**Задание 3.** (2 балла). Реализуйте функцию, которая принимает на вход строку, набор стоп слов и морфо-анализатор, и на выходе выдает набор слов (лемм), отчищенных от пунктуационных, разделяющих символов и стоп слов.\n",
        "\n",
        "Некоторый её возможный шаблон представлен ниже:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rWYw4tKwjKkb"
      },
      "source": [
        "Подробнее про использование pymorphy смотрите [тут](https://pymorphy2.readthedocs.io/en/0.6/user/guide.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m59j7RTnjJQm",
        "outputId": "ca6749e4-3305-42df-de9a-9b015d53c425"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pymorphy2 in /usr/local/lib/python3.7/dist-packages (0.9.1)\n",
            "Requirement already satisfied: dawg-python>=0.7.1 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.7.2)\n",
            "Requirement already satisfied: pymorphy2-dicts-ru<3.0,>=2.4 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (2.4.417127.4579844)\n",
            "Requirement already satisfied: docopt>=0.6 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.6.2)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pymorphy2-dicts in /usr/local/lib/python3.7/dist-packages (2.4.393442.3710985)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: DAWG-Python>=0.7 in /usr/local/lib/python3.7/dist-packages (0.7.2)\n"
          ]
        }
      ],
      "source": [
        "## блок с подтягиванием библиотеки для лемматизации\n",
        "!pip install pymorphy2\n",
        "!pip install pymorphy2-dicts\n",
        "!pip install 'DAWG-Python >= 0.7'\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dUMSFmoXSGPx",
        "outputId": "3a56a76d-3ee2-49ae-c443-be0991d6ef05"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        }
      ],
      "source": [
        "# мне кажется, когда есть готовый тул для стоп-слов, то удобнее его использовать\n",
        "import nltk\n",
        "nltk.download(\"stopwords\")\n",
        "from nltk.corpus import stopwords\n",
        "russian_stopwords = stopwords.words(\"russian\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Gyv0jLYsZli5"
      },
      "outputs": [],
      "source": [
        "import pymorphy2\n",
        "morph = pymorphy2.MorphAnalyzer()\n",
        "from string import punctuation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltyqXVNwOUfp",
        "outputId": "d4ee82f9-a7c9-48f7-bf55-aaf7185e3124"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['лимон', 'лимончики,', 'самовывоз.', 'плод', '2500']"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "# тест на часити данных\n",
        "[(morph.parse(w)[0]).normal_form for w in list(X_train['title&description'])[1].lower().split(' ')\n",
        "if w not in russian_stopwords and w != \" \" and w.strip() not in punctuation]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "r9aZxAmbbWnc",
        "outputId": "a39a3348-96ac-48f5-c2d5-5682fb19db40"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "punctuation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "ElMYlku8Zlf8"
      },
      "outputs": [],
      "source": [
        "def clear_and_morhp(text, russian_stopwords, morph):\n",
        "  '''\n",
        "  text: string - строка с нашим текстом\n",
        "  stop_words - List с выданными вам стоп словами\n",
        "  morph - анализатор текста\\слов для получения лемм\n",
        "  .lower() - к единому регистру\n",
        "  return List слов, преобразованных до лемм + убраны различные знаки + стоп слова\n",
        "  '''\n",
        "  lem_text = []\n",
        "  for sent in text:\n",
        "    lem_text.append([(morph.parse(w)[0]).normal_form.replace(',', '') for w in sent.lower().split(' ')\n",
        "                if w not in russian_stopwords and w != \" \" and w.strip() not in punctuation]) \n",
        "  return lem_text\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "YugOEox0RBxf",
        "outputId": "f73f04e7-e9d3-4ea8-d1e5-11483dc60ac9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                         title&description\n",
              "424166   [кофточка, девочка, р.62, кофточка, девочка, n...\n",
              "2093571         [лимон, лимончики, самовывоз., плод, 2500]\n",
              "165041   [3-к, квартира, 82.3, м², 8/9, эт., арт., 1052...\n",
              "2535335  [передний, панель, mazda, 6, (2007-2012), пере...\n",
              "571894   [босоножка, bershka, 41, размер, продать, новы...\n",
              "1927675  [комната, 11, м², 3-к, 8/9, эт., продаваться, ..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fcd55ed4-c64e-4444-9e88-7a1285b71679\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title&amp;description</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>424166</th>\n",
              "      <td>[кофточка, девочка, р.62, кофточка, девочка, n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2093571</th>\n",
              "      <td>[лимон, лимончики, самовывоз., плод, 2500]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165041</th>\n",
              "      <td>[3-к, квартира, 82.3, м², 8/9, эт., арт., 1052...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2535335</th>\n",
              "      <td>[передний, панель, mazda, 6, (2007-2012), пере...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>571894</th>\n",
              "      <td>[босоножка, bershka, 41, размер, продать, новы...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1927675</th>\n",
              "      <td>[комната, 11, м², 3-к, 8/9, эт., продаваться, ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fcd55ed4-c64e-4444-9e88-7a1285b71679')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fcd55ed4-c64e-4444-9e88-7a1285b71679 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fcd55ed4-c64e-4444-9e88-7a1285b71679');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "# тест на части данных\n",
        "X_train[['title&description']].head(6).apply(lambda x: clear_and_morhp(x, russian_stopwords, morph))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pk6RtT3pj6Dx"
      },
      "source": [
        "Если с реализацией данной функции возникнту проблемы - не стеняйтесь писать об этом в наш чат для получения помощи.\n",
        "\n",
        "Также вы можете реализовать не все 3 составляющих очистки текста, а какую-то их часть, но это даст вам меньше баллов.\n",
        "\n",
        "\n",
        "После реализации данной функции мы можем применить её к нашим данным и получить более \"чистый\" набор слов."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "DxZL57hmtSSD"
      },
      "outputs": [],
      "source": [
        "# ヾ(￣□￣;)ﾉ\n",
        "\n",
        "X_train[['title&description_clear']] = X_train[['title&description']].apply(lambda x: clear_and_morhp(x, russian_stopwords, morph))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "KkQaEduR1JnJ",
        "outputId": "caaba11e-d027-4ea6-ac29-cd08c358a045"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                   title&description_clear\n",
              "424166   [кофточка, девочка, р.62, кофточка, девочка, n...\n",
              "2093571         [лимон, лимончики, самовывоз., плод, 2500]\n",
              "165041   [3-к, квартира, 82.3, м², 8/9, эт., арт., 1052...\n",
              "2535335  [передний, панель, mazda, 6, (2007-2012), пере...\n",
              "571894   [босоножка, bershka, 41, размер, продать, новы..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31ec60af-2320-45b1-aa66-d2a01057ff8b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title&amp;description_clear</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>424166</th>\n",
              "      <td>[кофточка, девочка, р.62, кофточка, девочка, n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2093571</th>\n",
              "      <td>[лимон, лимончики, самовывоз., плод, 2500]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>165041</th>\n",
              "      <td>[3-к, квартира, 82.3, м², 8/9, эт., арт., 1052...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2535335</th>\n",
              "      <td>[передний, панель, mazda, 6, (2007-2012), пере...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>571894</th>\n",
              "      <td>[босоножка, bershka, 41, размер, продать, новы...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31ec60af-2320-45b1-aa66-d2a01057ff8b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-31ec60af-2320-45b1-aa66-d2a01057ff8b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-31ec60af-2320-45b1-aa66-d2a01057ff8b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "X_train[['title&description_clear']].head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GDhQAJVk1Uxv"
      },
      "outputs": [],
      "source": [
        "#работало это час, так что я сохраню в csv\n",
        "X_train[['title&description_clear']].to_csv('clear_res.csv', index=False, encoding='utf-8')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X54OSeDMVQze",
        "outputId": "e6b55a5c-056f-46ab-bb41-1378902dcbfa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "clear_res.csv  drive  sample_data\n"
          ]
        }
      ],
      "source": [
        "! ls"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YAUQ-60QSupg"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "X_train_clear = pd.read_csv('clear_res.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "sSgZCE69XpkO",
        "outputId": "bc01a3d2-f5ce-41e5-8661-84e8aebee3ed"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  title&description_clear\n",
              "899998  ['детский', 'кроватка', 'ортопедический', 'мат...\n",
              "899999  ['набор', 'вышивка', 'крестик', '\"малыш\"', 'на..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-279c65ca-141b-45c2-a7d6-e9e4e8712934\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title&amp;description_clear</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>899998</th>\n",
              "      <td>['детский', 'кроватка', 'ортопедический', 'мат...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>899999</th>\n",
              "      <td>['набор', 'вышивка', 'крестик', '\"малыш\"', 'на...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-279c65ca-141b-45c2-a7d6-e9e4e8712934')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-279c65ca-141b-45c2-a7d6-e9e4e8712934 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-279c65ca-141b-45c2-a7d6-e9e4e8712934');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "X_train_clear.tail(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Z-dvAhLYKqx",
        "outputId": "e1e67570-3a2c-423c-bd87-561ca411b970"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "type(X_train_clear['title&description_clear'].head(3)[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KUAEte8lkYR4"
      },
      "source": [
        "### 3. Построение простых эмбеддингов и работа с моделями\n",
        "\n",
        "Сейчас вы визуально можете сравнить по определенному набору строк (допустим вызвав `.head(15)`) как изменились наши текстовые данные после предобработки. Так что мы можем с уверенностью сказать, что некоторое визуальное преобразование появилось. Но а выиграли ли мы с точки зрения достижения результата в рамках нашей задачи. Разберемся в этой части домашки."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n6npoO_ls5eL"
      },
      "source": [
        "**Задание 3.1** (0.5 балла) В рамках этого пункта нам стоит получить некоторый `бейзлайн`, с которым мы будем сравнивать остальные наши модели. Для этого вернемся к трейну X_train, в котором все еще находился мусор, слова всех форм и стоп-слова. Воспользуемся построением Tf-Idf матрицы от этих данных и также используем SGDClassifier в качестве достаточно простой модели.\n",
        "\n",
        "Ну и в качестве метрики мы будем использовать accuracy (для подсчета этой метрики используем имеющийся у нас уже X_test), т.к. у нас все же многоклассовая классификация. Результат этой модели мы будем сравнивать с другими по ходу этого задания."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k1NhFNyw4oX8"
      },
      "source": [
        "Использовалось:\n",
        "- https://gist.github.com/chelseatroy/e9b37107a65d155a0a1289a91a8b67d2\n",
        "- https://stackoverflow.com/questions/45306988/column-of-lists-convert-list-to-string-as-a-new-column"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vm2GFUI3iELP"
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Your code here (⊃｡•́‿•̀｡)⊃"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UjxpIBxbrK33"
      },
      "outputs": [],
      "source": [
        "vectorizer = TfidfVectorizer()\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FOtajqFev6h0"
      },
      "outputs": [],
      "source": [
        "res_2 = vectorizer.transform(X_valid['title&description'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RyToGgNdsNSn",
        "outputId": "ab4ca8f6-7fc1-4f14-cdbe-e9c8a845db58"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "SGDClassifier(n_jobs=-1)"
            ]
          },
          "execution_count": 99,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LbVibXtLkyi3",
        "outputId": "4466c7d4-8cc8-4008-8df5-67ac8c02f164"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([10, 29, 34, ..., 20, 25, 27])"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.predict(res_2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "htCVLYhb8XpH",
        "outputId": "2cf25c83-eb62-4fd3-d851-512360016801"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.8472"
            ]
          },
          "execution_count": 101,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "22R87kbf8yzC"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dFkiHFNptsOy"
      },
      "source": [
        "**Задание 3.2** (0.5 балла) У метода TfidfVectorizer есть набор своих параметров. В рамках этого задания мы предлагаем вам поизучать возможные гиперпараметры этого метода и подобрать такие значения, которые вам позволят получить более лучший результат на непредобработанном X_train на той же простой модели SGDClassifier. Как вариант вы можете рассмореть н-граммы большей длины или поставить ограничение сверху на кол-во получаемых токенов в данном методе. 3-4 экспериментов с различными значениями гиперпараметорв будет достаточно, чтобы можно было сделать возможные выводы о значениях, которые подходят в рамках нашей задачи."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qAzt-nyTTIoL"
      },
      "source": [
        "**Начнем с одного параметра**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HX62vqpGiEJD",
        "outputId": "5e4cb627-f515-46c3-c2a7-d57b8db63884"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.84768"
            ]
          },
          "execution_count": 103,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# игнорим термины, частота которых в документе строго ниже заданного порога\n",
        "vectorizer = TfidfVectorizer(min_df=50)\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jxk5IkkGUZsy"
      },
      "source": [
        "Качество понизилось, но, кажется, для нашей задачи не очень подходит использование минимального порога"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cIVmj-1xKXiB",
        "outputId": "660d7cba-afe0-4487-9cca-f9ce8012ba42"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.84732"
            ]
          },
          "execution_count": 105,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#  tf with 1 + log(tf)\n",
        "vectorizer = TfidfVectorizer(sublinear_tf=True)\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AknrOu_aUk_t"
      },
      "source": [
        "стало еще хуже.."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63CcIOUnTQEE"
      },
      "source": [
        "**Скомбинируем несколько**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lWhvxON3PdoL",
        "outputId": "67eca369-00e6-412e-ee1e-e5e3b61a0022"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.84774"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "vectorizer = TfidfVectorizer(strip_accents='unicode', sublinear_tf=True)\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NWSvq4YvXy3S"
      },
      "source": [
        "Попробуем векторизовать от двух слов, комбинируя параметры"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qL4TWkYzTdZU",
        "outputId": "6d62979d-9096-495a-b27f-ea0982acbc02"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.84779"
            ]
          },
          "execution_count": 109,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "vectorizer = TfidfVectorizer(strip_accents='unicode', sublinear_tf=True, token_pattern=r'\\w{2,}')\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1)\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZEHbPktCtYPN"
      },
      "source": [
        "Просто с биграммами"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gqRxVtRptXaA",
        "outputId": "79a64660-ed07-48e7-d49a-2cda3fd4cf5d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.84716"
            ]
          },
          "execution_count": 110,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "vectorizer = TfidfVectorizer(token_pattern=r'\\w{2,}')\n",
        "res_1 = vectorizer.fit_transform(X_train['title&description'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1)\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZwzVjqhraDys"
      },
      "source": [
        "Самой удачной оказалась комбинация трех параметров"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v5dZYXm-vkFP"
      },
      "source": [
        "**Задание 3.3** (3 балла) Теперь подключим рассмотрению такой подход к агрегации фичей как Bag of words. В каком-то смысле, математически он слабее tf-idf подхода, но для этого мы и столкнем их в рамках нашего задания, чтобы посмотреть на результат.\n",
        "\n",
        "В рамках этой части домашки предобработайте **уже очищенные** данные через tf-idf и bag of words подходы. И на полученных наборах фичей обучите **SGDClassifier**, какой-нибудь градиентный бустинг (к примеру XGBoost) и удобное для вас дерево решений (из того же sklearn). \n",
        "\n",
        "**Минимально** у вас должно получиться **6 экспериментов**, между которыми вы сравниваете полученные accuracy. Также для устойчивого обучения стоит поиграться с параметрами двух выбранных моделей и подходов агрегации, или же провести дополнительные эксперименты, чтобы сделать выводы, как изменение параметров моделей обучения от дефолтных влияет на наши итоговые результаты.\n",
        "\n",
        "После проведенных экспериментов стоит изложить некоторые выводы о полученных результатах. Как повлияли разные подходы tf-id и bag of words на обучение одной и той же модели, как сопоставимы результаты с этими подходами на разных моделях."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Просто SGDClassifier с TfidfVectorizer()"
      ],
      "metadata": {
        "id": "sqbbhkIUc6xd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier"
      ],
      "metadata": {
        "id": "3-18-q6bQFNC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JC4lUT-GjP5B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ffb75bb9-bfa4-4668-dd1d-3be75a99d893"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.81818"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ],
      "source": [
        "vectorizer = TfidfVectorizer()\n",
        "res_1 = vectorizer.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. С доп. параметрами"
      ],
      "metadata": {
        "id": "muiPZB_wdeXG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FvOjDOcjjQvF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5c30e4b-7a7f-4ea7-a261-02bc8ba5e073"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.82166"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ],
      "source": [
        "vectorizer = TfidfVectorizer(strip_accents='unicode', sublinear_tf=True, token_pattern=r'\\w{2,}')\n",
        "res_1 = vectorizer.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. CountVectorizer + XGBClassifier"
      ],
      "metadata": {
        "id": "N-8dWTeZhexP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "vec = CountVectorizer()\n",
        "res_1 = vec.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vec.transform(X_valid['title&description'])"
      ],
      "metadata": {
        "id": "FLFdAEiyhiTF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier\n",
        "clf = XGBClassifier(n_estimators=10)"
      ],
      "metadata": {
        "id": "5BcZ5nBgknXN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(res_1, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l_x3gDnSkpPP",
        "outputId": "4910c3b4-adb6-4d8b-bc7a-a329ee50a629"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(n_estimators=10, objective='multi:softprob')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_valid, clf.predict(res_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oHqRr-T1ky03",
        "outputId": "f0bcd451-f29d-4f1a-ccfa-7d0d750d344e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.52154"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. CountVectorizer + SGBClassifier"
      ],
      "metadata": {
        "id": "TC_fRurD0c1q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "vec = CountVectorizer()\n",
        "res_1 = vec.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vec.transform(X_valid['title&description'])\n",
        "model = SGDClassifier(n_jobs=-1, loss='hinge')\n",
        "model.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, model.predict(res_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NOUsf9lH0oiw",
        "outputId": "e74ad35f-d129-4800-e730-a2e1fb692d97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.83514"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "пока что первый вариант, где близко по качеству к необработанным данным (что странно, конечно, по идее на предобработанных должен быть выше результат)"
      ],
      "metadata": {
        "id": "BFPC56o02Mf3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Tf-idf + XGBClassifier"
      ],
      "metadata": {
        "id": "09Uxvs2w2YDw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "vectorizer = TfidfVectorizer(strip_accents='unicode', sublinear_tf=True, token_pattern=r'\\w{2,}')\n",
        "res_1 = vectorizer.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vectorizer.transform(X_valid['title&description'])\n",
        "clf = XGBClassifier(n_estimators=1)\n",
        "clf.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, clf.predict(res_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jIBny_-S2gFk",
        "outputId": "b58a9864-f832-4207-e5b5-f1445f85bc78"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.38609"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "без комментариев..."
      ],
      "metadata": {
        "id": "IQ4BqELQA-4r"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. RandomForestClassifier"
      ],
      "metadata": {
        "id": "xIybyNBjBBkO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# CountVectorizer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "vec = CountVectorizer()\n",
        "res_1 = vec.fit_transform(X_train_clear['title&description_clear'])\n",
        "res_2 = vec.transform(X_valid['title&description'])\n",
        "clf = RandomForestClassifier(n_estimators = 5, n_jobs = -1, max_depth=2)\n",
        "clf.fit(res_1, y_train)\n",
        "accuracy_score(y_valid, clf.predict(res_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "ifZg7wo1BAtn",
        "outputId": "173bac4a-6fee-4bcf-f2a0-2892a51cf8e2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-43-55c5d1bff1c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mvec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCountVectorizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mres_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_clear\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title&description_clear'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mres_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title&description'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/feature_extraction/text.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, raw_documents, y)\u001b[0m\n\u001b[1;32m   1349\u001b[0m             )\n\u001b[1;32m   1350\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmax_features\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1351\u001b[0;31m                 \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sort_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvocabulary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1352\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvocabulary_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvocabulary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1353\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/feature_extraction/text.py\u001b[0m in \u001b[0;36m_sort_features\u001b[0;34m(self, X, vocabulary)\u001b[0m\n\u001b[1;32m   1132\u001b[0m         \u001b[0mReturns\u001b[0m \u001b[0ma\u001b[0m \u001b[0mreordered\u001b[0m \u001b[0mmatrix\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mmodifies\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mvocabulary\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mplace\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1133\u001b[0m         \"\"\"\n\u001b[0;32m-> 1134\u001b[0;31m         \u001b[0msorted_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvocabulary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1135\u001b[0m         \u001b[0mmap_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mempty\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1136\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mnew_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mterm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mold_val\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Вывод:** наилучший результат дал CountVectorizer + SGBClassifier, возьмем эту модель для предсказания теста"
      ],
      "metadata": {
        "id": "1IiSpMKnTwmy"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rmwPRMCsvk3X"
      },
      "source": [
        "### 4. В погоне за кагглом (снова)\n",
        "\n",
        "**Задание 4.** (1 балл) Да, вам снова нужно попробовать собрать сабмит для нашей тестирующей системе на каггле, для этого:\n",
        "Вы выбираете одну из рассмотренных пар: подхода к агрегации фичей и саму модель (или же берете вообще какой-нибудь LinearSVC, мы не запрещаем).\n",
        "Делаете такую же предобработку данных к тесту (очистка, агрегация фичей), и по выбранной вами модели строите предикт для тестовых данных. Сохранить его также стоит сразу по пути на диск: `/content/drive/MyDrive/ds_intro_hw2/submit.csv`, чтобы его было оттуда файликом проще забрать."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BpUK0nMPXGA2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "Test = pd.read_csv('/content/drive/MyDrive/hse-intro-ds-2022-hw2/test.csv')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Test.fillna('', inplace=True)\n",
        "Test['title&description'] = Test['title'].str[:] + ' ' + Test['description'].str[:]"
      ],
      "metadata": {
        "id": "lBzqNB7XZKbX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Test['title&description'].head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yTbrsLiEcrP9",
        "outputId": "ce949477-8e5f-4e71-ea70-2f66be8bac2c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    Оборудование для магазина детской одежды Прода...\n",
              "1    SAMSUNG Galaxy A3 2017 Samsung Galaxy A3 2017 ...\n",
              "Name: title&description, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ヾ(￣□￣;)ﾉ\n",
        "\n",
        "Test[['title&description_clear']] = Test[['title&description']].apply(lambda x: clear_and_morhp(x, russian_stopwords, morph))\n"
      ],
      "metadata": {
        "id": "eUQHM8oSZ_4t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('a')"
      ],
      "metadata": {
        "id": "KUU-ZNNarYT5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "res_2 = vec.transform(Test['title&description_clear'])\n",
        "q = model.predict(res_2)"
      ],
      "metadata": {
        "id": "pS_VpO4idDf8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6I6sGmEr2eG8"
      },
      "source": [
        "### 5. Рисерч\n",
        "\n",
        "**Задание 5.** (1 балл) В рамках этого пункта мы предлагаем вам еще поработать над данной задачей в другом подходе. В рамках задания 3 мы обучили некоторый ансамбл моделей. А что, если они будут работать над нашей задачей вместе? Да, фактически в этой задаче может помочь некотрое ансамблирование моделей.\n",
        "\n",
        "Для его более честной и усточивой работы, к имеющимся обучающим данным вы можете применить бустреп к каждой из n-моделей (сколько вы выберете - дело ваше, но желательно не меньше 3), чтобы ей на вход поступили разные подмножества данных.\n",
        "\n",
        "Или же вы можете поискать другие полезные закономерности в имеющихся данных, которые помогут улучшить нашу метрику качества по этой задаче. В этом плане мы вас не ограничиваем.\n",
        "\n",
        "Но если все же в голову ничего не приходит, предлагаем рассмотреть ансамблирование нескольких моделей.\n",
        "\n",
        "В рамках ограничения оперативной памяти, вы можете их обучить по отдельности, после сохранить черзе `pickle` и после подгрузить их для некторого ансамблирования. Итоговый класс вы можете выбирать через выбор большинства, или же предложить свою эвристику."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h1-pSxc61uTS"
      },
      "outputs": [],
      "source": [
        " # Your research here (⊃｡•́‿•̀｡)⊃"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0qKqI7n0h6u9"
      },
      "source": [
        "### *Дополнительное задание\n",
        "\n",
        "**Задание 6.** (+1 доп балл) Попробуйте использовать дополнительные подходы генерации признаков на текстовых даннных (fasttext, w2v и др) и для дальнейшего обучения моделей. Повысилось ли качество модели? Сделайте выводы.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GxQe1qSkioJH"
      },
      "outputs": [],
      "source": [
        " # Your research here (⊃｡•́‿•̀｡)⊃"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "DS_intro_hw2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}